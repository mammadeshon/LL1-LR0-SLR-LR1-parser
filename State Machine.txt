State 000 {
	itemSet: 
		s->@program                                             [$]
		program->@decl_list                                     [$]
		decl_list->@decl_list decl                              [$, VOID, BOOL, INT, FLOAT]
		decl_list->@decl                                        [$, VOID, BOOL, INT, FLOAT]
		decl->@var_decl                                         [$, VOID, BOOL, INT, FLOAT]
		decl->@func_decl                                        [$, VOID, BOOL, INT, FLOAT]
		var_decl->@type_spec IDENT ;                            [$, VOID, BOOL, INT, FLOAT]
		var_decl->@type_spec IDENT [ ] ;                        [$, VOID, BOOL, INT, FLOAT]
		func_decl->@type_spec IDENT ( params ) comp_stmt        [$, VOID, BOOL, INT, FLOAT]
		type_spec->@VOID                                        [IDENT]
		type_spec->@BOOL                                        [IDENT]
		type_spec->@INT                                         [IDENT]
		type_spec->@FLOAT                                       [IDENT]
	MoveMap: 
		decl_list -> 2
		func_decl -> 5
		FLOAT -> 10
		decl -> 3
		type_spec -> 6
		BOOL -> 8
		program -> 1
		var_decl -> 4
		VOID -> 7
		INT -> 9
}State 001 {
	itemSet: 
		s-> program@                                            [$]
	MoveMap: 
}State 002 {
	itemSet: 
		program-> decl_list@                                    [$]
		decl_list-> decl_list@decl                              [$, VOID, BOOL, INT, FLOAT]
		decl->@var_decl                                         [$, VOID, BOOL, INT, FLOAT]
		decl->@func_decl                                        [$, VOID, BOOL, INT, FLOAT]
		var_decl->@type_spec IDENT ;                            [$, VOID, BOOL, INT, FLOAT]
		var_decl->@type_spec IDENT [ ] ;                        [$, VOID, BOOL, INT, FLOAT]
		func_decl->@type_spec IDENT ( params ) comp_stmt        [$, VOID, BOOL, INT, FLOAT]
		type_spec->@VOID                                        [IDENT]
		type_spec->@BOOL                                        [IDENT]
		type_spec->@INT                                         [IDENT]
		type_spec->@FLOAT                                       [IDENT]
	MoveMap: 
		func_decl -> 5
		FLOAT -> 10
		decl -> 11
		type_spec -> 6
		BOOL -> 8
		var_decl -> 4
		VOID -> 7
		INT -> 9
}State 003 {
	itemSet: 
		decl_list-> decl@                                       [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 004 {
	itemSet: 
		decl-> var_decl@                                        [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 005 {
	itemSet: 
		decl-> func_decl@                                       [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 006 {
	itemSet: 
		var_decl-> type_spec@IDENT ;                            [$, VOID, BOOL, INT, FLOAT]
		var_decl-> type_spec@IDENT [ ] ;                        [$, VOID, BOOL, INT, FLOAT]
		func_decl-> type_spec@IDENT ( params ) comp_stmt        [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		IDENT -> 12
}State 007 {
	itemSet: 
		type_spec-> VOID@                                       [IDENT]
	MoveMap: 
}State 008 {
	itemSet: 
		type_spec-> BOOL@                                       [IDENT]
	MoveMap: 
}State 009 {
	itemSet: 
		type_spec-> INT@                                        [IDENT]
	MoveMap: 
}State 010 {
	itemSet: 
		type_spec-> FLOAT@                                      [IDENT]
	MoveMap: 
}State 011 {
	itemSet: 
		decl_list-> decl_list decl@                             [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 012 {
	itemSet: 
		var_decl-> type_spec IDENT@;                            [$, VOID, BOOL, INT, FLOAT]
		var_decl-> type_spec IDENT@[ ] ;                        [$, VOID, BOOL, INT, FLOAT]
		func_decl-> type_spec IDENT@( params ) comp_stmt        [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		( -> 15
		; -> 13
		[ -> 14
}State 013 {
	itemSet: 
		var_decl-> type_spec IDENT ;@                           [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 014 {
	itemSet: 
		var_decl-> type_spec IDENT [@] ;                        [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		] -> 16
}State 015 {
	itemSet: 
		func_decl-> type_spec IDENT (@params ) comp_stmt        [$, VOID, BOOL, INT, FLOAT]
		params->@param_list                                     [)]
		params->@VOID                                           [)]
		param_list->@param_list , param                         [), ,]
		param_list->@param                                      [), ,]
		param->@type_spec IDENT                                 [), ,]
		param->@type_spec IDENT [ ]                             [), ,]
		type_spec->@VOID                                        [IDENT]
		type_spec->@BOOL                                        [IDENT]
		type_spec->@INT                                         [IDENT]
		type_spec->@FLOAT                                       [IDENT]
	MoveMap: 
		FLOAT -> 10
		type_spec -> 21
		param -> 20
		BOOL -> 8
		params -> 17
		VOID -> 19
		INT -> 9
		param_list -> 18
}State 016 {
	itemSet: 
		var_decl-> type_spec IDENT [ ]@;                        [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		; -> 22
}State 017 {
	itemSet: 
		func_decl-> type_spec IDENT ( params@) comp_stmt        [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		) -> 23
}State 018 {
	itemSet: 
		params-> param_list@                                    [)]
		param_list-> param_list@, param                         [), ,]
	MoveMap: 
		, -> 24
}State 019 {
	itemSet: 
		params-> VOID@                                          [)]
		type_spec-> VOID@                                       [IDENT]
	MoveMap: 
}State 020 {
	itemSet: 
		param_list-> param@                                     [), ,]
	MoveMap: 
}State 021 {
	itemSet: 
		param-> type_spec@IDENT                                 [), ,]
		param-> type_spec@IDENT [ ]                             [), ,]
	MoveMap: 
		IDENT -> 25
}State 022 {
	itemSet: 
		var_decl-> type_spec IDENT [ ] ;@                       [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 023 {
	itemSet: 
		func_decl-> type_spec IDENT ( params )@comp_stmt        [$, VOID, BOOL, INT, FLOAT]
		comp_stmt->@{ local_decls stmt_list }                   [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		comp_stmt -> 26
		{ -> 27
}State 024 {
	itemSet: 
		param_list-> param_list ,@param                         [), ,]
		param->@type_spec IDENT                                 [), ,]
		param->@type_spec IDENT [ ]                             [), ,]
		type_spec->@VOID                                        [IDENT]
		type_spec->@BOOL                                        [IDENT]
		type_spec->@INT                                         [IDENT]
		type_spec->@FLOAT                                       [IDENT]
	MoveMap: 
		FLOAT -> 10
		type_spec -> 21
		param -> 28
		BOOL -> 8
		VOID -> 7
		INT -> 9
}State 025 {
	itemSet: 
		param-> type_spec IDENT@                                [), ,]
		param-> type_spec IDENT@[ ]                             [), ,]
	MoveMap: 
		[ -> 29
}State 026 {
	itemSet: 
		func_decl-> type_spec IDENT ( params ) comp_stmt@       [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 027 {
	itemSet: 
		comp_stmt-> {@local_decls stmt_list }                   [$, VOID, BOOL, INT, FLOAT]
		local_decls->@                                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decls->@local_decls local_decl                    [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		local_decls -> 30
}State 028 {
	itemSet: 
		param_list-> param_list , param@                        [), ,]
	MoveMap: 
}State 029 {
	itemSet: 
		param-> type_spec IDENT [@]                             [), ,]
	MoveMap: 
		] -> 31
}State 030 {
	itemSet: 
		comp_stmt-> { local_decls@stmt_list }                   [$, VOID, BOOL, INT, FLOAT]
		local_decls-> local_decls@local_decl                    [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		stmt_list->@                                            [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt_list->@stmt_list stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		local_decl->@type_spec IDENT ;                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decl->@type_spec IDENT [ ] ;                      [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		type_spec->@VOID                                        [IDENT]
		type_spec->@BOOL                                        [IDENT]
		type_spec->@INT                                         [IDENT]
		type_spec->@FLOAT                                       [IDENT]
	MoveMap: 
		FLOAT -> 10
		local_decl -> 33
		type_spec -> 34
		BOOL -> 8
		stmt_list -> 32
		VOID -> 7
		INT -> 9
}State 031 {
	itemSet: 
		param-> type_spec IDENT [ ]@                            [), ,]
	MoveMap: 
}State 032 {
	itemSet: 
		comp_stmt-> { local_decls stmt_list@}                   [$, VOID, BOOL, INT, FLOAT]
		stmt_list-> stmt_list@stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 39
		comp_stmt -> 38
		INT_LIT -> 58
		RETURN -> 50
		BREAK -> 51
		expr -> 44
		IF -> 47
		return_stmt -> 42
		while_stmt -> 41
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 48
		( -> 56
		+ -> 55
		expr_stmt -> 37
		- -> 54
		IDENT -> 52
		break_stmt -> 43
		for_stmt -> 40
		WHILE -> 49
		; -> 45
		{ -> 46
		} -> 35
		stmt -> 36
}State 033 {
	itemSet: 
		local_decls-> local_decls local_decl@                   [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 034 {
	itemSet: 
		local_decl-> type_spec@IDENT ;                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decl-> type_spec@IDENT [ ] ;                      [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		IDENT -> 61
}State 035 {
	itemSet: 
		comp_stmt-> { local_decls stmt_list }@                  [$, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 036 {
	itemSet: 
		stmt_list-> stmt_list stmt@                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 037 {
	itemSet: 
		stmt-> expr_stmt@                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 038 {
	itemSet: 
		stmt-> comp_stmt@                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 039 {
	itemSet: 
		stmt-> if_stmt@                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 040 {
	itemSet: 
		stmt-> for_stmt@                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 041 {
	itemSet: 
		stmt-> while_stmt@                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 042 {
	itemSet: 
		stmt-> return_stmt@                                     [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 043 {
	itemSet: 
		stmt-> break_stmt@                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 044 {
	itemSet: 
		expr_stmt-> expr@;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		; -> 62
		< -> 69
		GE -> 68
		> -> 70
}State 045 {
	itemSet: 
		expr_stmt-> ;@                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 046 {
	itemSet: 
		comp_stmt-> {@local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		local_decls->@                                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decls->@local_decls local_decl                    [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		local_decls -> 76
}State 047 {
	itemSet: 
		if_stmt-> IF@( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt-> IF@( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		( -> 77
}State 048 {
	itemSet: 
		for_stmt-> FOR@( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		( -> 78
}State 049 {
	itemSet: 
		while_stmt-> WHILE@( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		( -> 79
}State 050 {
	itemSet: 
		return_stmt-> RETURN@;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt-> RETURN@expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 81
		; -> 80
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 051 {
	itemSet: 
		break_stmt-> BREAK@;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		; -> 82
}State 052 {
	itemSet: 
		expr-> IDENT@= expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@. SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		( -> 85
		[ -> 84
		= -> 83
		. -> 86
}State 053 {
	itemSet: 
		expr-> !@expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 87
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 054 {
	itemSet: 
		expr-> -@expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 88
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 055 {
	itemSet: 
		expr-> +@expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 89
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 056 {
	itemSet: 
		expr-> (@expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 90
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 057 {
	itemSet: 
		expr-> BOOL_LIT@                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 058 {
	itemSet: 
		expr-> INT_LIT@                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 059 {
	itemSet: 
		expr-> FLOAT_LIT@                                       [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 060 {
	itemSet: 
		expr-> NEW@type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		type_spec->@VOID                                        [[]
		type_spec->@BOOL                                        [[]
		type_spec->@INT                                         [[]
		type_spec->@FLOAT                                       [[]
	MoveMap: 
		FLOAT -> 104
		type_spec -> 100
		BOOL -> 102
		VOID -> 101
		INT -> 103
}State 061 {
	itemSet: 
		local_decl-> type_spec IDENT@;                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decl-> type_spec IDENT@[ ] ;                      [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		; -> 105
		[ -> 106
}State 062 {
	itemSet: 
		expr_stmt-> expr ;@                                     [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 063 {
	itemSet: 
		expr-> expr OR@expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 107
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 064 {
	itemSet: 
		expr-> expr AND@expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 108
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 065 {
	itemSet: 
		expr-> expr EQ@expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 109
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 066 {
	itemSet: 
		expr-> expr NE@expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 110
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 067 {
	itemSet: 
		expr-> expr LE@expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 111
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 068 {
	itemSet: 
		expr-> expr GE@expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 112
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 069 {
	itemSet: 
		expr-> expr <@expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 113
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 070 {
	itemSet: 
		expr-> expr >@expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 114
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 071 {
	itemSet: 
		expr-> expr +@expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 115
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 072 {
	itemSet: 
		expr-> expr –@expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 116
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 073 {
	itemSet: 
		expr-> expr *@expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 117
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 074 {
	itemSet: 
		expr-> expr /@expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 118
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 075 {
	itemSet: 
		expr-> expr %@expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 119
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 076 {
	itemSet: 
		comp_stmt-> { local_decls@stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		local_decls-> local_decls@local_decl                    [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		stmt_list->@                                            [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt_list->@stmt_list stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		local_decl->@type_spec IDENT ;                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decl->@type_spec IDENT [ ] ;                      [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		type_spec->@VOID                                        [IDENT]
		type_spec->@BOOL                                        [IDENT]
		type_spec->@INT                                         [IDENT]
		type_spec->@FLOAT                                       [IDENT]
	MoveMap: 
		FLOAT -> 10
		local_decl -> 33
		type_spec -> 34
		BOOL -> 8
		stmt_list -> 120
		VOID -> 7
		INT -> 9
}State 077 {
	itemSet: 
		if_stmt-> IF (@expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt-> IF (@expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 121
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 078 {
	itemSet: 
		for_stmt-> FOR (@opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		opt_expr->@expr                                         [;]
		opt_expr->@                                             [;]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		opt_expr -> 122
		expr -> 123
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 079 {
	itemSet: 
		while_stmt-> WHILE (@expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 124
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 080 {
	itemSet: 
		return_stmt-> RETURN ;@                                 [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 081 {
	itemSet: 
		return_stmt-> RETURN expr@;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		; -> 125
		< -> 69
		GE -> 68
		> -> 70
}State 082 {
	itemSet: 
		break_stmt-> BREAK ;@                                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 083 {
	itemSet: 
		expr-> IDENT =@expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 126
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 084 {
	itemSet: 
		expr-> IDENT [@expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [@expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 127
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 085 {
	itemSet: 
		expr-> IDENT (@args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		args->@arg_list                                         [)]
		args->@                                                 [)]
		arg_list->@arg_list , expr                              [), ,]
		arg_list->@expr                                         [), ,]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		args -> 137
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 139
		+ -> 143
		INT_LIT -> 146
		- -> 142
		arg_list -> 138
}State 086 {
	itemSet: 
		expr-> IDENT .@SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		SIZE -> 149
}State 087 {
	itemSet: 
		expr-> ! expr@                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 088 {
	itemSet: 
		expr-> - expr@                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 089 {
	itemSet: 
		expr-> + expr@                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 090 {
	itemSet: 
		expr-> ( expr@)                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 150
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 091 {
	itemSet: 
		expr-> IDENT@= expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@. SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		( -> 166
		[ -> 165
		= -> 164
		. -> 167
}State 092 {
	itemSet: 
		expr-> !@expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 168
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 093 {
	itemSet: 
		expr-> -@expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 169
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 094 {
	itemSet: 
		expr-> +@expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 170
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 095 {
	itemSet: 
		expr-> (@expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 171
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 096 {
	itemSet: 
		expr-> BOOL_LIT@                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 097 {
	itemSet: 
		expr-> INT_LIT@                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 098 {
	itemSet: 
		expr-> FLOAT_LIT@                                       [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 099 {
	itemSet: 
		expr-> NEW@type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		type_spec->@VOID                                        [[]
		type_spec->@BOOL                                        [[]
		type_spec->@INT                                         [[]
		type_spec->@FLOAT                                       [[]
	MoveMap: 
		FLOAT -> 104
		type_spec -> 172
		BOOL -> 102
		VOID -> 101
		INT -> 103
}State 100 {
	itemSet: 
		expr-> NEW type_spec@[ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		[ -> 173
}State 101 {
	itemSet: 
		type_spec-> VOID@                                       [[]
	MoveMap: 
}State 102 {
	itemSet: 
		type_spec-> BOOL@                                       [[]
	MoveMap: 
}State 103 {
	itemSet: 
		type_spec-> INT@                                        [[]
	MoveMap: 
}State 104 {
	itemSet: 
		type_spec-> FLOAT@                                      [[]
	MoveMap: 
}State 105 {
	itemSet: 
		local_decl-> type_spec IDENT ;@                         [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 106 {
	itemSet: 
		local_decl-> type_spec IDENT [@] ;                      [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		] -> 174
}State 107 {
	itemSet: 
		expr-> expr OR expr@                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 108 {
	itemSet: 
		expr-> expr AND expr@                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 109 {
	itemSet: 
		expr-> expr EQ expr@                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 110 {
	itemSet: 
		expr-> expr NE expr@                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 111 {
	itemSet: 
		expr-> expr LE expr@                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 112 {
	itemSet: 
		expr-> expr GE expr@                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 113 {
	itemSet: 
		expr-> expr < expr@                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 114 {
	itemSet: 
		expr-> expr > expr@                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 115 {
	itemSet: 
		expr-> expr + expr@                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 116 {
	itemSet: 
		expr-> expr – expr@                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 117 {
	itemSet: 
		expr-> expr * expr@                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 118 {
	itemSet: 
		expr-> expr / expr@                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 119 {
	itemSet: 
		expr-> expr % expr@                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 120 {
	itemSet: 
		comp_stmt-> { local_decls stmt_list@}                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt_list-> stmt_list@stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 39
		comp_stmt -> 38
		INT_LIT -> 58
		RETURN -> 50
		BREAK -> 51
		expr -> 44
		IF -> 47
		return_stmt -> 42
		while_stmt -> 41
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 48
		( -> 56
		+ -> 55
		expr_stmt -> 37
		- -> 54
		IDENT -> 52
		break_stmt -> 43
		for_stmt -> 40
		WHILE -> 49
		; -> 45
		{ -> 46
		} -> 175
		stmt -> 36
}State 121 {
	itemSet: 
		if_stmt-> IF ( expr@) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt-> IF ( expr@) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 176
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 122 {
	itemSet: 
		for_stmt-> FOR ( opt_expr@; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		; -> 177
}State 123 {
	itemSet: 
		opt_expr-> expr@                                        [;]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 124 {
	itemSet: 
		while_stmt-> WHILE ( expr@) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 178
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 125 {
	itemSet: 
		return_stmt-> RETURN expr ;@                            [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 126 {
	itemSet: 
		expr-> IDENT = expr@                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 127 {
	itemSet: 
		expr-> IDENT [ expr@] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr@]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 179
		GE -> 185
		> -> 187
}State 128 {
	itemSet: 
		expr-> IDENT@= expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@. SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		( -> 195
		[ -> 194
		= -> 193
		. -> 196
}State 129 {
	itemSet: 
		expr-> !@expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 197
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 130 {
	itemSet: 
		expr-> -@expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 198
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 131 {
	itemSet: 
		expr-> +@expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 199
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 132 {
	itemSet: 
		expr-> (@expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 200
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 133 {
	itemSet: 
		expr-> BOOL_LIT@                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 134 {
	itemSet: 
		expr-> INT_LIT@                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 135 {
	itemSet: 
		expr-> FLOAT_LIT@                                       [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 136 {
	itemSet: 
		expr-> NEW@type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		type_spec->@VOID                                        [[]
		type_spec->@BOOL                                        [[]
		type_spec->@INT                                         [[]
		type_spec->@FLOAT                                       [[]
	MoveMap: 
		FLOAT -> 104
		type_spec -> 201
		BOOL -> 102
		VOID -> 101
		INT -> 103
}State 137 {
	itemSet: 
		expr-> IDENT ( args@)                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		) -> 202
}State 138 {
	itemSet: 
		args-> arg_list@                                        [)]
		arg_list-> arg_list@, expr                              [), ,]
	MoveMap: 
		, -> 203
}State 139 {
	itemSet: 
		arg_list-> expr@                                        [), ,]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 140 {
	itemSet: 
		expr-> IDENT@= expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@[ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT@. SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		( -> 219
		[ -> 218
		= -> 217
		. -> 220
}State 141 {
	itemSet: 
		expr-> !@expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 221
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 142 {
	itemSet: 
		expr-> -@expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 222
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 143 {
	itemSet: 
		expr-> +@expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 223
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 144 {
	itemSet: 
		expr-> (@expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 224
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 145 {
	itemSet: 
		expr-> BOOL_LIT@                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 146 {
	itemSet: 
		expr-> INT_LIT@                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 147 {
	itemSet: 
		expr-> FLOAT_LIT@                                       [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 148 {
	itemSet: 
		expr-> NEW@type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		type_spec->@VOID                                        [[]
		type_spec->@BOOL                                        [[]
		type_spec->@INT                                         [[]
		type_spec->@FLOAT                                       [[]
	MoveMap: 
		FLOAT -> 104
		type_spec -> 225
		BOOL -> 102
		VOID -> 101
		INT -> 103
}State 149 {
	itemSet: 
		expr-> IDENT . SIZE@                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 150 {
	itemSet: 
		expr-> ( expr )@                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 151 {
	itemSet: 
		expr-> expr OR@expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 226
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 152 {
	itemSet: 
		expr-> expr AND@expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 227
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 153 {
	itemSet: 
		expr-> expr EQ@expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 228
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 154 {
	itemSet: 
		expr-> expr NE@expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 229
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 155 {
	itemSet: 
		expr-> expr LE@expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 230
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 156 {
	itemSet: 
		expr-> expr GE@expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 231
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 157 {
	itemSet: 
		expr-> expr <@expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 232
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 158 {
	itemSet: 
		expr-> expr >@expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 233
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 159 {
	itemSet: 
		expr-> expr +@expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 234
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 160 {
	itemSet: 
		expr-> expr –@expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 235
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 161 {
	itemSet: 
		expr-> expr *@expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 236
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 162 {
	itemSet: 
		expr-> expr /@expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 237
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 163 {
	itemSet: 
		expr-> expr %@expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 238
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 164 {
	itemSet: 
		expr-> IDENT =@expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 239
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 165 {
	itemSet: 
		expr-> IDENT [@expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [@expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 240
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 166 {
	itemSet: 
		expr-> IDENT (@args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		args->@arg_list                                         [)]
		args->@                                                 [)]
		arg_list->@arg_list , expr                              [), ,]
		arg_list->@expr                                         [), ,]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		args -> 241
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 139
		+ -> 143
		INT_LIT -> 146
		- -> 142
		arg_list -> 138
}State 167 {
	itemSet: 
		expr-> IDENT .@SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		SIZE -> 242
}State 168 {
	itemSet: 
		expr-> ! expr@                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 169 {
	itemSet: 
		expr-> - expr@                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 170 {
	itemSet: 
		expr-> + expr@                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 171 {
	itemSet: 
		expr-> ( expr@)                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 243
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 172 {
	itemSet: 
		expr-> NEW type_spec@[ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		[ -> 244
}State 173 {
	itemSet: 
		expr-> NEW type_spec [@expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 245
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 174 {
	itemSet: 
		local_decl-> type_spec IDENT [ ]@;                      [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		; -> 246
}State 175 {
	itemSet: 
		comp_stmt-> { local_decls stmt_list }@                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 176 {
	itemSet: 
		if_stmt-> IF ( expr )@stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt-> IF ( expr )@stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 250
		comp_stmt -> 249
		INT_LIT -> 58
		RETURN -> 261
		BREAK -> 262
		expr -> 255
		IF -> 258
		return_stmt -> 253
		while_stmt -> 252
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 259
		( -> 56
		+ -> 55
		expr_stmt -> 248
		- -> 54
		IDENT -> 52
		break_stmt -> 254
		for_stmt -> 251
		WHILE -> 260
		; -> 256
		{ -> 257
		stmt -> 247
}State 177 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ;@opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		opt_expr->@expr                                         [;]
		opt_expr->@                                             [;]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		opt_expr -> 263
		expr -> 123
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 178 {
	itemSet: 
		while_stmt-> WHILE ( expr )@stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 39
		comp_stmt -> 38
		INT_LIT -> 58
		RETURN -> 50
		BREAK -> 51
		expr -> 44
		IF -> 47
		return_stmt -> 42
		while_stmt -> 41
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 48
		( -> 56
		+ -> 55
		expr_stmt -> 37
		- -> 54
		IDENT -> 52
		break_stmt -> 43
		for_stmt -> 40
		WHILE -> 49
		; -> 45
		{ -> 46
		stmt -> 264
}State 179 {
	itemSet: 
		expr-> IDENT [ expr ]@= expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr ]@                                  [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		= -> 265
}State 180 {
	itemSet: 
		expr-> expr OR@expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 266
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 181 {
	itemSet: 
		expr-> expr AND@expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 267
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 182 {
	itemSet: 
		expr-> expr EQ@expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 268
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 183 {
	itemSet: 
		expr-> expr NE@expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 269
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 184 {
	itemSet: 
		expr-> expr LE@expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 270
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 185 {
	itemSet: 
		expr-> expr GE@expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 271
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 186 {
	itemSet: 
		expr-> expr <@expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 272
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 187 {
	itemSet: 
		expr-> expr >@expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 273
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 188 {
	itemSet: 
		expr-> expr +@expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 274
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 189 {
	itemSet: 
		expr-> expr –@expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 275
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 190 {
	itemSet: 
		expr-> expr *@expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 276
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 191 {
	itemSet: 
		expr-> expr /@expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 277
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 192 {
	itemSet: 
		expr-> expr %@expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 278
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 193 {
	itemSet: 
		expr-> IDENT =@expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 279
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 194 {
	itemSet: 
		expr-> IDENT [@expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [@expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 280
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 195 {
	itemSet: 
		expr-> IDENT (@args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		args->@arg_list                                         [)]
		args->@                                                 [)]
		arg_list->@arg_list , expr                              [), ,]
		arg_list->@expr                                         [), ,]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		args -> 281
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 139
		+ -> 143
		INT_LIT -> 146
		- -> 142
		arg_list -> 138
}State 196 {
	itemSet: 
		expr-> IDENT .@SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		SIZE -> 282
}State 197 {
	itemSet: 
		expr-> ! expr@                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 198 {
	itemSet: 
		expr-> - expr@                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 199 {
	itemSet: 
		expr-> + expr@                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 200 {
	itemSet: 
		expr-> ( expr@)                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 283
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 201 {
	itemSet: 
		expr-> NEW type_spec@[ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		[ -> 284
}State 202 {
	itemSet: 
		expr-> IDENT ( args )@                                  [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 203 {
	itemSet: 
		arg_list-> arg_list ,@expr                              [), ,]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 285
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 204 {
	itemSet: 
		expr-> expr OR@expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 286
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 205 {
	itemSet: 
		expr-> expr AND@expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 287
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 206 {
	itemSet: 
		expr-> expr EQ@expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 288
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 207 {
	itemSet: 
		expr-> expr NE@expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 289
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 208 {
	itemSet: 
		expr-> expr LE@expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 290
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 209 {
	itemSet: 
		expr-> expr GE@expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 291
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 210 {
	itemSet: 
		expr-> expr <@expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 292
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 211 {
	itemSet: 
		expr-> expr >@expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 293
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 212 {
	itemSet: 
		expr-> expr +@expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 294
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 213 {
	itemSet: 
		expr-> expr –@expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 295
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 214 {
	itemSet: 
		expr-> expr *@expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 296
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 215 {
	itemSet: 
		expr-> expr /@expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 297
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 216 {
	itemSet: 
		expr-> expr %@expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 298
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 217 {
	itemSet: 
		expr-> IDENT =@expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 299
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 218 {
	itemSet: 
		expr-> IDENT [@expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [@expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 300
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 219 {
	itemSet: 
		expr-> IDENT (@args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		args->@arg_list                                         [)]
		args->@                                                 [)]
		arg_list->@arg_list , expr                              [), ,]
		arg_list->@expr                                         [), ,]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		args -> 301
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 139
		+ -> 143
		INT_LIT -> 146
		- -> 142
		arg_list -> 138
}State 220 {
	itemSet: 
		expr-> IDENT .@SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		SIZE -> 302
}State 221 {
	itemSet: 
		expr-> ! expr@                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 222 {
	itemSet: 
		expr-> - expr@                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 223 {
	itemSet: 
		expr-> + expr@                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 224 {
	itemSet: 
		expr-> ( expr@)                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 303
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 225 {
	itemSet: 
		expr-> NEW type_spec@[ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		[ -> 304
}State 226 {
	itemSet: 
		expr-> expr OR expr@                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 227 {
	itemSet: 
		expr-> expr AND expr@                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 228 {
	itemSet: 
		expr-> expr EQ expr@                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 229 {
	itemSet: 
		expr-> expr NE expr@                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 230 {
	itemSet: 
		expr-> expr LE expr@                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 231 {
	itemSet: 
		expr-> expr GE expr@                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 232 {
	itemSet: 
		expr-> expr < expr@                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 233 {
	itemSet: 
		expr-> expr > expr@                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 234 {
	itemSet: 
		expr-> expr + expr@                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 235 {
	itemSet: 
		expr-> expr – expr@                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 236 {
	itemSet: 
		expr-> expr * expr@                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 237 {
	itemSet: 
		expr-> expr / expr@                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 238 {
	itemSet: 
		expr-> expr % expr@                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 239 {
	itemSet: 
		expr-> IDENT = expr@                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 240 {
	itemSet: 
		expr-> IDENT [ expr@] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr@]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 305
		GE -> 185
		> -> 187
}State 241 {
	itemSet: 
		expr-> IDENT ( args@)                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		) -> 306
}State 242 {
	itemSet: 
		expr-> IDENT . SIZE@                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 243 {
	itemSet: 
		expr-> ( expr )@                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 244 {
	itemSet: 
		expr-> NEW type_spec [@expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 307
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 245 {
	itemSet: 
		expr-> NEW type_spec [ expr@]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 308
		GE -> 185
		> -> 187
}State 246 {
	itemSet: 
		local_decl-> type_spec IDENT [ ] ;@                     [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
}State 247 {
	itemSet: 
		if_stmt-> IF ( expr ) stmt@                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt-> IF ( expr ) stmt@ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		ELSE -> 309
}State 248 {
	itemSet: 
		stmt-> expr_stmt@                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 249 {
	itemSet: 
		stmt-> comp_stmt@                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 250 {
	itemSet: 
		stmt-> if_stmt@                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 251 {
	itemSet: 
		stmt-> for_stmt@                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 252 {
	itemSet: 
		stmt-> while_stmt@                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 253 {
	itemSet: 
		stmt-> return_stmt@                                     [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 254 {
	itemSet: 
		stmt-> break_stmt@                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 255 {
	itemSet: 
		expr_stmt-> expr@;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		; -> 310
		< -> 69
		GE -> 68
		> -> 70
}State 256 {
	itemSet: 
		expr_stmt-> ;@                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 257 {
	itemSet: 
		comp_stmt-> {@local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		local_decls->@                                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decls->@local_decls local_decl                    [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
	MoveMap: 
		local_decls -> 311
}State 258 {
	itemSet: 
		if_stmt-> IF@( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt-> IF@( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		( -> 312
}State 259 {
	itemSet: 
		for_stmt-> FOR@( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		( -> 313
}State 260 {
	itemSet: 
		while_stmt-> WHILE@( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		( -> 314
}State 261 {
	itemSet: 
		return_stmt-> RETURN@;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt-> RETURN@expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 316
		; -> 315
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 262 {
	itemSet: 
		break_stmt-> BREAK@;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		; -> 317
}State 263 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr@; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		; -> 318
}State 264 {
	itemSet: 
		while_stmt-> WHILE ( expr ) stmt@                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 265 {
	itemSet: 
		expr-> IDENT [ expr ] =@expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		expr -> 319
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 266 {
	itemSet: 
		expr-> expr OR expr@                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 267 {
	itemSet: 
		expr-> expr AND expr@                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 268 {
	itemSet: 
		expr-> expr EQ expr@                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 269 {
	itemSet: 
		expr-> expr NE expr@                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 270 {
	itemSet: 
		expr-> expr LE expr@                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 271 {
	itemSet: 
		expr-> expr GE expr@                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 272 {
	itemSet: 
		expr-> expr < expr@                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 273 {
	itemSet: 
		expr-> expr > expr@                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 274 {
	itemSet: 
		expr-> expr + expr@                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 275 {
	itemSet: 
		expr-> expr – expr@                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 276 {
	itemSet: 
		expr-> expr * expr@                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 277 {
	itemSet: 
		expr-> expr / expr@                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 278 {
	itemSet: 
		expr-> expr % expr@                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 279 {
	itemSet: 
		expr-> IDENT = expr@                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 280 {
	itemSet: 
		expr-> IDENT [ expr@] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr@]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 320
		GE -> 185
		> -> 187
}State 281 {
	itemSet: 
		expr-> IDENT ( args@)                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		) -> 321
}State 282 {
	itemSet: 
		expr-> IDENT . SIZE@                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 283 {
	itemSet: 
		expr-> ( expr )@                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 284 {
	itemSet: 
		expr-> NEW type_spec [@expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 322
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 285 {
	itemSet: 
		arg_list-> arg_list , expr@                             [), ,]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 286 {
	itemSet: 
		expr-> expr OR expr@                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 287 {
	itemSet: 
		expr-> expr AND expr@                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 288 {
	itemSet: 
		expr-> expr EQ expr@                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 289 {
	itemSet: 
		expr-> expr NE expr@                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 290 {
	itemSet: 
		expr-> expr LE expr@                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 291 {
	itemSet: 
		expr-> expr GE expr@                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 292 {
	itemSet: 
		expr-> expr < expr@                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 293 {
	itemSet: 
		expr-> expr > expr@                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 294 {
	itemSet: 
		expr-> expr + expr@                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 295 {
	itemSet: 
		expr-> expr – expr@                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 296 {
	itemSet: 
		expr-> expr * expr@                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 297 {
	itemSet: 
		expr-> expr / expr@                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 298 {
	itemSet: 
		expr-> expr % expr@                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 299 {
	itemSet: 
		expr-> IDENT = expr@                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 300 {
	itemSet: 
		expr-> IDENT [ expr@] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr@]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 323
		GE -> 185
		> -> 187
}State 301 {
	itemSet: 
		expr-> IDENT ( args@)                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		) -> 324
}State 302 {
	itemSet: 
		expr-> IDENT . SIZE@                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 303 {
	itemSet: 
		expr-> ( expr )@                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 304 {
	itemSet: 
		expr-> NEW type_spec [@expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 325
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 305 {
	itemSet: 
		expr-> IDENT [ expr ]@= expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr ]@                                  [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		= -> 326
}State 306 {
	itemSet: 
		expr-> IDENT ( args )@                                  [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 307 {
	itemSet: 
		expr-> NEW type_spec [ expr@]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 327
		GE -> 185
		> -> 187
}State 308 {
	itemSet: 
		expr-> NEW type_spec [ expr ]@                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 309 {
	itemSet: 
		if_stmt-> IF ( expr ) stmt ELSE@stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 39
		comp_stmt -> 38
		INT_LIT -> 58
		RETURN -> 50
		BREAK -> 51
		expr -> 44
		IF -> 47
		return_stmt -> 42
		while_stmt -> 41
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 48
		( -> 56
		+ -> 55
		expr_stmt -> 37
		- -> 54
		IDENT -> 52
		break_stmt -> 43
		for_stmt -> 40
		WHILE -> 49
		; -> 45
		{ -> 46
		stmt -> 328
}State 310 {
	itemSet: 
		expr_stmt-> expr ;@                                     [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 311 {
	itemSet: 
		comp_stmt-> { local_decls@stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		local_decls-> local_decls@local_decl                    [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		stmt_list->@                                            [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt_list->@stmt_list stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		local_decl->@type_spec IDENT ;                          [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		local_decl->@type_spec IDENT [ ] ;                      [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
		type_spec->@VOID                                        [IDENT]
		type_spec->@BOOL                                        [IDENT]
		type_spec->@INT                                         [IDENT]
		type_spec->@FLOAT                                       [IDENT]
	MoveMap: 
		FLOAT -> 10
		local_decl -> 33
		type_spec -> 34
		BOOL -> 8
		stmt_list -> 329
		VOID -> 7
		INT -> 9
}State 312 {
	itemSet: 
		if_stmt-> IF (@expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt-> IF (@expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 330
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 313 {
	itemSet: 
		for_stmt-> FOR (@opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		opt_expr->@expr                                         [;]
		opt_expr->@                                             [;]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		opt_expr -> 331
		expr -> 123
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 314 {
	itemSet: 
		while_stmt-> WHILE (@expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 332
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 315 {
	itemSet: 
		return_stmt-> RETURN ;@                                 [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 316 {
	itemSet: 
		return_stmt-> RETURN expr@;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		; -> 333
		< -> 69
		GE -> 68
		> -> 70
}State 317 {
	itemSet: 
		break_stmt-> BREAK ;@                                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 318 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ;@opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		opt_expr->@expr                                         [)]
		opt_expr->@                                             [)]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		opt_expr -> 334
		expr -> 335
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 319 {
	itemSet: 
		expr-> IDENT [ expr ] = expr@                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 63
		% -> 75
		* -> 73
		+ -> 71
		EQ -> 65
		/ -> 74
		– -> 72
		AND -> 64
		NE -> 66
		LE -> 67
		< -> 69
		GE -> 68
		> -> 70
}State 320 {
	itemSet: 
		expr-> IDENT [ expr ]@= expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr ]@                                  [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		= -> 336
}State 321 {
	itemSet: 
		expr-> IDENT ( args )@                                  [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 322 {
	itemSet: 
		expr-> NEW type_spec [ expr@]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 337
		GE -> 185
		> -> 187
}State 323 {
	itemSet: 
		expr-> IDENT [ expr ]@= expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> IDENT [ expr ]@                                  [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		= -> 338
}State 324 {
	itemSet: 
		expr-> IDENT ( args )@                                  [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 325 {
	itemSet: 
		expr-> NEW type_spec [ expr@]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		] -> 339
		GE -> 185
		> -> 187
}State 326 {
	itemSet: 
		expr-> IDENT [ expr ] =@expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		expr -> 340
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 327 {
	itemSet: 
		expr-> NEW type_spec [ expr ]@                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 328 {
	itemSet: 
		if_stmt-> IF ( expr ) stmt ELSE stmt@                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 329 {
	itemSet: 
		comp_stmt-> { local_decls stmt_list@}                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt_list-> stmt_list@stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 39
		comp_stmt -> 38
		INT_LIT -> 58
		RETURN -> 50
		BREAK -> 51
		expr -> 44
		IF -> 47
		return_stmt -> 42
		while_stmt -> 41
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 48
		( -> 56
		+ -> 55
		expr_stmt -> 37
		- -> 54
		IDENT -> 52
		break_stmt -> 43
		for_stmt -> 40
		WHILE -> 49
		; -> 45
		{ -> 46
		} -> 341
		stmt -> 36
}State 330 {
	itemSet: 
		if_stmt-> IF ( expr@) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt-> IF ( expr@) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 342
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 331 {
	itemSet: 
		for_stmt-> FOR ( opt_expr@; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		; -> 343
}State 332 {
	itemSet: 
		while_stmt-> WHILE ( expr@) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		) -> 344
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 333 {
	itemSet: 
		return_stmt-> RETURN expr ;@                            [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 334 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ; opt_expr@) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
		) -> 345
}State 335 {
	itemSet: 
		opt_expr-> expr@                                        [)]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 336 {
	itemSet: 
		expr-> IDENT [ expr ] =@expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 129
		NEW -> 136
		IDENT -> 128
		BOOL_LIT -> 133
		FLOAT_LIT -> 135
		( -> 132
		expr -> 346
		+ -> 131
		INT_LIT -> 134
		- -> 130
}State 337 {
	itemSet: 
		expr-> NEW type_spec [ expr ]@                          [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 338 {
	itemSet: 
		expr-> IDENT [ expr ] =@expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT = expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 141
		NEW -> 148
		IDENT -> 140
		BOOL_LIT -> 145
		FLOAT_LIT -> 147
		( -> 144
		expr -> 347
		+ -> 143
		INT_LIT -> 146
		- -> 142
}State 339 {
	itemSet: 
		expr-> NEW type_spec [ expr ]@                          [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
}State 340 {
	itemSet: 
		expr-> IDENT [ expr ] = expr@                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 151
		% -> 163
		* -> 161
		+ -> 159
		EQ -> 153
		/ -> 162
		– -> 160
		AND -> 152
		NE -> 154
		LE -> 155
		< -> 157
		GE -> 156
		> -> 158
}State 341 {
	itemSet: 
		comp_stmt-> { local_decls stmt_list }@                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 342 {
	itemSet: 
		if_stmt-> IF ( expr )@stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt-> IF ( expr )@stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 250
		comp_stmt -> 249
		INT_LIT -> 58
		RETURN -> 261
		BREAK -> 262
		expr -> 255
		IF -> 258
		return_stmt -> 253
		while_stmt -> 252
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 259
		( -> 56
		+ -> 55
		expr_stmt -> 248
		- -> 54
		IDENT -> 52
		break_stmt -> 254
		for_stmt -> 251
		WHILE -> 260
		; -> 256
		{ -> 257
		stmt -> 348
}State 343 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ;@opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		opt_expr->@expr                                         [;]
		opt_expr->@                                             [;]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 53
		NEW -> 60
		IDENT -> 52
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		( -> 56
		opt_expr -> 349
		expr -> 123
		+ -> 55
		INT_LIT -> 58
		- -> 54
}State 344 {
	itemSet: 
		while_stmt-> WHILE ( expr )@stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 250
		comp_stmt -> 249
		INT_LIT -> 58
		RETURN -> 261
		BREAK -> 262
		expr -> 255
		IF -> 258
		return_stmt -> 253
		while_stmt -> 252
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 259
		( -> 56
		+ -> 55
		expr_stmt -> 248
		- -> 54
		IDENT -> 52
		break_stmt -> 254
		for_stmt -> 251
		WHILE -> 260
		; -> 256
		{ -> 257
		stmt -> 350
}State 345 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ; opt_expr )@stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 39
		comp_stmt -> 38
		INT_LIT -> 58
		RETURN -> 50
		BREAK -> 51
		expr -> 44
		IF -> 47
		return_stmt -> 42
		while_stmt -> 41
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 48
		( -> 56
		+ -> 55
		expr_stmt -> 37
		- -> 54
		IDENT -> 52
		break_stmt -> 43
		for_stmt -> 40
		WHILE -> 49
		; -> 45
		{ -> 46
		stmt -> 351
}State 346 {
	itemSet: 
		expr-> IDENT [ expr ] = expr@                           [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [], OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 180
		% -> 192
		* -> 190
		+ -> 188
		EQ -> 182
		/ -> 191
		– -> 189
		AND -> 181
		NE -> 183
		LE -> 184
		< -> 186
		GE -> 185
		> -> 187
}State 347 {
	itemSet: 
		expr-> IDENT [ expr ] = expr@                           [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@OR expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@AND expr                                    [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@EQ expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@NE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@LE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@GE expr                                     [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@< expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@> expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@+ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@– expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@* expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@/ expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr-> expr@% expr                                      [), ,, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		OR -> 204
		% -> 216
		* -> 214
		+ -> 212
		EQ -> 206
		/ -> 215
		– -> 213
		AND -> 205
		NE -> 207
		LE -> 208
		< -> 210
		GE -> 209
		> -> 211
}State 348 {
	itemSet: 
		if_stmt-> IF ( expr ) stmt@                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt-> IF ( expr ) stmt@ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		ELSE -> 352
}State 349 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr@; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		; -> 353
}State 350 {
	itemSet: 
		while_stmt-> WHILE ( expr ) stmt@                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 351 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ; opt_expr ) stmt@ [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
	MoveMap: 
}State 352 {
	itemSet: 
		if_stmt-> IF ( expr ) stmt ELSE@stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 250
		comp_stmt -> 249
		INT_LIT -> 58
		RETURN -> 261
		BREAK -> 262
		expr -> 255
		IF -> 258
		return_stmt -> 253
		while_stmt -> 252
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 259
		( -> 56
		+ -> 55
		expr_stmt -> 248
		- -> 54
		IDENT -> 52
		break_stmt -> 254
		for_stmt -> 251
		WHILE -> 260
		; -> 256
		{ -> 257
		stmt -> 354
}State 353 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ;@opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		opt_expr->@expr                                         [)]
		opt_expr->@                                             [)]
		expr->@IDENT = expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [), OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		! -> 92
		NEW -> 99
		IDENT -> 91
		BOOL_LIT -> 96
		FLOAT_LIT -> 98
		( -> 95
		opt_expr -> 355
		expr -> 335
		+ -> 94
		INT_LIT -> 97
		- -> 93
}State 354 {
	itemSet: 
		if_stmt-> IF ( expr ) stmt ELSE stmt@                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}State 355 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ; opt_expr@) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
		) -> 356
}State 356 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ; opt_expr )@stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@expr_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@comp_stmt                                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@if_stmt                                          [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@for_stmt                                         [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@while_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@return_stmt                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		stmt->@break_stmt                                       [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@expr ;                                      [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr_stmt->@;                                           [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		comp_stmt->@{ local_decls stmt_list }                   [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt                              [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		if_stmt->@IF ( expr ) stmt ELSE stmt                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		for_stmt->@FOR ( opt_expr ; opt_expr ; opt_expr ) stmt  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		while_stmt->@WHILE ( expr ) stmt                        [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN ;                                  [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		return_stmt->@RETURN expr ;                             [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		break_stmt->@BREAK ;                                    [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
		expr->@IDENT = expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ] = expr                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr OR expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr AND expr                                    [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr EQ expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr NE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr LE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr GE expr                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr < expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr > expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr + expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr – expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr * expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr / expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@expr % expr                                      [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@! expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@- expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@+ expr                                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@( expr )                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT                                            [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT [ expr ]                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT ( args )                                   [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@IDENT . SIZE                                     [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@BOOL_LIT                                         [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@INT_LIT                                          [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@FLOAT_LIT                                        [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
		expr->@NEW type_spec [ expr ]                           [;, OR, AND, EQ, NE, LE, GE, <, >, +, –, *, /, %]
	MoveMap: 
		NEW -> 60
		if_stmt -> 250
		comp_stmt -> 249
		INT_LIT -> 58
		RETURN -> 261
		BREAK -> 262
		expr -> 255
		IF -> 258
		return_stmt -> 253
		while_stmt -> 252
		! -> 53
		BOOL_LIT -> 57
		FLOAT_LIT -> 59
		FOR -> 259
		( -> 56
		+ -> 55
		expr_stmt -> 248
		- -> 54
		IDENT -> 52
		break_stmt -> 254
		for_stmt -> 251
		WHILE -> 260
		; -> 256
		{ -> 257
		stmt -> 357
}State 357 {
	itemSet: 
		for_stmt-> FOR ( opt_expr ; opt_expr ; opt_expr ) stmt@ [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
	MoveMap: 
}