First:
           decl_list -> [VOID, BOOL, INT, FLOAT]
                decl -> [VOID, BOOL, INT, FLOAT]
             if_stmt -> [IF]
           comp_stmt -> [{]
             program -> [VOID, BOOL, INT, FLOAT]
          local_decl -> [VOID, BOOL, INT, FLOAT]
           type_spec -> [VOID, BOOL, INT, FLOAT]
               param -> [VOID, BOOL, INT, FLOAT]
           stmt_list -> [#, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
                expr -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW]
         return_stmt -> [RETURN]
          while_stmt -> [WHILE]
              params -> [VOID, BOOL, INT, FLOAT]
           expr_stmt -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;]
          param_list -> [VOID, BOOL, INT, FLOAT]
            arg_list -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW]
                args -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, #]
           func_decl -> [VOID, BOOL, INT, FLOAT]
                   s -> [VOID, BOOL, INT, FLOAT]
            opt_expr -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, #]
          break_stmt -> [BREAK]
            for_stmt -> [FOR]
            var_decl -> [VOID, BOOL, INT, FLOAT]
                stmt -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
         local_decls -> [#, VOID, BOOL, INT, FLOAT]
Follow:
           decl_list -> [$, VOID, BOOL, INT, FLOAT]
                decl -> [$, VOID, BOOL, INT, FLOAT]
             if_stmt -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
           comp_stmt -> [$, VOID, BOOL, INT, FLOAT, }, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
             program -> [$]
          local_decl -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
           type_spec -> [IDENT, []
               param -> [), ,]
           stmt_list -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
                expr -> [;, ), ], OR, AND, EQ, NE, LE, GE, <, >, +, â€“, *, /, %, ,]
         return_stmt -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
          while_stmt -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK]
              params -> [)]
           expr_stmt -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
          param_list -> [), ,]
            arg_list -> [), ,]
                args -> [)]
           func_decl -> [$, VOID, BOOL, INT, FLOAT]
                   s -> [$]
            opt_expr -> [;, )]
          break_stmt -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
            for_stmt -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
            var_decl -> [$, VOID, BOOL, INT, FLOAT]
                stmt -> [}, IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, ELSE]
         local_decls -> [IDENT, !, -, +, (, BOOL_LIT, INT_LIT, FLOAT_LIT, NEW, ;, {, IF, FOR, WHILE, RETURN, BREAK, }, VOID, BOOL, INT, FLOAT]
